// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "DreamDefender.h"
#include "DreamDefender.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeDreamDefender() {}
	void ABaseLight::OnOverlapBegin(AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)
	{
		BaseLight_eventOnOverlapBegin_Parms Parms;
		Parms.OtherActor=OtherActor;
		Parms.OtherComp=OtherComp;
		Parms.OtherBodyIndex=OtherBodyIndex;
		Parms.bFromSweep=bFromSweep ? true : false;
		Parms.SweepResult=SweepResult;
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_OnOverlapBegin),&Parms);
	}
	void ABaseLight::OnOverlapEnd(AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
	{
		BaseLight_eventOnOverlapEnd_Parms Parms;
		Parms.OtherActor=OtherActor;
		Parms.OtherComp=OtherComp;
		Parms.OtherBodyIndex=OtherBodyIndex;
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_OnOverlapEnd),&Parms);
	}
	void ABaseLight::PlaySoundOnNightmaresHit()
	{
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_PlaySoundOnNightmaresHit),NULL);
	}
	void ABaseLight::StopSoundOnNightmaresExit()
	{
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_StopSoundOnNightmaresExit),NULL);
	}
	void ABaseLight::StaticRegisterNativesABaseLight()
	{
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"AddEnemyToArrays",(Native)&ABaseLight::execAddEnemyToArrays);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"AddParentActorToIgnore",(Native)&ABaseLight::execAddParentActorToIgnore);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"CheckEnemyLineOfSight",(Native)&ABaseLight::execCheckEnemyLineOfSight);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"EnemiesInLightUpdate",(Native)&ABaseLight::execEnemiesInLightUpdate);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"GetDamageTime",(Native)&ABaseLight::execGetDamageTime);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"GetDamageValue",(Native)&ABaseLight::execGetDamageValue);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"GetLightIntensity",(Native)&ABaseLight::execGetLightIntensity);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"GetLightOn",(Native)&ABaseLight::execGetLightOn);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"OnOverlapBegin",(Native)&ABaseLight::execOnOverlapBegin);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"OnOverlapEnd",(Native)&ABaseLight::execOnOverlapEnd);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"PrintEnemiesInArray",(Native)&ABaseLight::execPrintEnemiesInArray);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"RemoveEnemyOfArrays",(Native)&ABaseLight::execRemoveEnemyOfArrays);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"RemoveParentActorToIgnore",(Native)&ABaseLight::execRemoveParentActorToIgnore);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"SetDamageTime",(Native)&ABaseLight::execSetDamageTime);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"SetDamageValue",(Native)&ABaseLight::execSetDamageValue);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"SetLightIntensity",(Native)&ABaseLight::execSetLightIntensity);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"SetLightOff",(Native)&ABaseLight::execSetLightOff);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"SetLightOn",(Native)&ABaseLight::execSetLightOn);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"ToggleEquipToActor",(Native)&ABaseLight::execToggleEquipToActor);
		FNativeFunctionRegistrar::RegisterFunction(ABaseLight::StaticClass(),"ToggleLight",(Native)&ABaseLight::execToggleLight);
	}
	IMPLEMENT_CLASS(ABaseLight, 792510291);
	void ADreamDefenderCharacter::Pickup()
	{
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_Pickup),NULL);
	}
	void ADreamDefenderCharacter::ToggleOnOff()
	{
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_ToggleOnOff),NULL);
	}
	void ADreamDefenderCharacter::StaticRegisterNativesADreamDefenderCharacter()
	{
	}
	IMPLEMENT_CLASS(ADreamDefenderCharacter, 4107650074);
	void ADreamDefenderGameMode::StaticRegisterNativesADreamDefenderGameMode()
	{
	}
	IMPLEMENT_CLASS(ADreamDefenderGameMode, 3082873482);
	void ALittle_Girl::StaticRegisterNativesALittle_Girl()
	{
	}
	IMPLEMENT_CLASS(ALittle_Girl, 961311493);
	void ANightmare_BaseClass::Die()
	{
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_Die),NULL);
	}
	void ANightmare_BaseClass::UpdateTransparency(float lightDamageFrequency)
	{
		Nightmare_BaseClass_eventUpdateTransparency_Parms Parms;
		Parms.lightDamageFrequency=lightDamageFrequency;
		ProcessEvent(FindFunctionChecked(DREAMDEFENDER_UpdateTransparency),&Parms);
	}
	void ANightmare_BaseClass::StaticRegisterNativesANightmare_BaseClass()
	{
		FNativeFunctionRegistrar::RegisterFunction(ANightmare_BaseClass::StaticClass(),"GetCurrentHealth",(Native)&ANightmare_BaseClass::execGetCurrentHealth);
		FNativeFunctionRegistrar::RegisterFunction(ANightmare_BaseClass::StaticClass(),"ReceiveDamage",(Native)&ANightmare_BaseClass::execReceiveDamage);
		FNativeFunctionRegistrar::RegisterFunction(ANightmare_BaseClass::StaticClass(),"SetCurrentHealth",(Native)&ANightmare_BaseClass::execSetCurrentHealth);
	}
	IMPLEMENT_CLASS(ANightmare_BaseClass, 2636402922);
FName DREAMDEFENDER_Die = FName(TEXT("Die"));
FName DREAMDEFENDER_OnOverlapBegin = FName(TEXT("OnOverlapBegin"));
FName DREAMDEFENDER_OnOverlapEnd = FName(TEXT("OnOverlapEnd"));
FName DREAMDEFENDER_Pickup = FName(TEXT("Pickup"));
FName DREAMDEFENDER_PlaySoundOnNightmaresHit = FName(TEXT("PlaySoundOnNightmaresHit"));
FName DREAMDEFENDER_StopSoundOnNightmaresExit = FName(TEXT("StopSoundOnNightmaresExit"));
FName DREAMDEFENDER_ToggleOnOff = FName(TEXT("ToggleOnOff"));
FName DREAMDEFENDER_UpdateTransparency = FName(TEXT("UpdateTransparency"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpotLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();

	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_AddEnemyToArrays();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_AddParentActorToIgnore();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_CheckEnemyLineOfSight();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_EnemiesInLightUpdate();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_GetDamageTime();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_GetDamageValue();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_GetLightIntensity();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_GetLightOn();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_OnOverlapBegin();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_OnOverlapEnd();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_PlaySoundOnNightmaresHit();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_PrintEnemiesInArray();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_RemoveEnemyOfArrays();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_RemoveParentActorToIgnore();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_SetDamageTime();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_SetDamageValue();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_SetLightIntensity();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_SetLightOff();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_SetLightOn();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_StopSoundOnNightmaresExit();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_ToggleEquipToActor();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ABaseLight_ToggleLight();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ABaseLight_NoRegister();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ABaseLight();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ADreamDefenderCharacter_Pickup();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ADreamDefenderCharacter_ToggleOnOff();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ADreamDefenderCharacter_NoRegister();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ADreamDefenderCharacter();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ADreamDefenderGameMode_NoRegister();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ADreamDefenderGameMode();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ALittle_Girl_NoRegister();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ALittle_Girl();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ANightmare_BaseClass_Die();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ANightmare_BaseClass_GetCurrentHealth();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ANightmare_BaseClass_ReceiveDamage();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ANightmare_BaseClass_SetCurrentHealth();
	DREAMDEFENDER_API class UFunction* Z_Construct_UFunction_ANightmare_BaseClass_UpdateTransparency();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ANightmare_BaseClass_NoRegister();
	DREAMDEFENDER_API class UClass* Z_Construct_UClass_ANightmare_BaseClass();
	DREAMDEFENDER_API class UPackage* Z_Construct_UPackage_DreamDefender();
	UFunction* Z_Construct_UFunction_ABaseLight_AddEnemyToArrays()
	{
		struct BaseLight_eventAddEnemyToArrays_Parms
		{
			AActor* actor;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddEnemyToArrays"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventAddEnemyToArrays_Parms));
			UProperty* NewProp_actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(actor, BaseLight_eventAddEnemyToArrays_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("FIN  GET/SET //Ajoute l'ennemi aux tableaux"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_AddParentActorToIgnore()
	{
		struct BaseLight_eventAddParentActorToIgnore_Parms
		{
			AActor* actor;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddParentActorToIgnore"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventAddParentActorToIgnore_Parms));
			UProperty* NewProp_actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(actor, BaseLight_eventAddParentActorToIgnore_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_CheckEnemyLineOfSight()
	{
		struct BaseLight_eventCheckEnemyLineOfSight_Parms
		{
			AActor* actor;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CheckEnemyLineOfSight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00040401, 65535, sizeof(BaseLight_eventCheckEnemyLineOfSight_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BaseLight_eventCheckEnemyLineOfSight_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BaseLight_eventCheckEnemyLineOfSight_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BaseLight_eventCheckEnemyLineOfSight_Parms), sizeof(bool), true);
			UProperty* NewProp_actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(actor, BaseLight_eventCheckEnemyLineOfSight_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Verifie le line of sight de la lumiere"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_EnemiesInLightUpdate()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnemiesInLightUpdate"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("On verifie s'il y a des ennemis dans la lumiere et on assigne les degats"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_GetDamageTime()
	{
		struct BaseLight_eventGetDamageTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDamageTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventGetDamageTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, BaseLight_eventGetDamageTime_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Retourne la fr?quence des d?g?ts sur les ennemis en secondes"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_GetDamageValue()
	{
		struct BaseLight_eventGetDamageValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDamageValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventGetDamageValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, BaseLight_eventGetDamageValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get damage value"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_GetLightIntensity()
	{
		struct BaseLight_eventGetLightIntensity_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLightIntensity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventGetLightIntensity_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, BaseLight_eventGetLightIntensity_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get intensit? de la lumi?re"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_GetLightOn()
	{
		struct BaseLight_eventGetLightOn_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLightOn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventGetLightOn_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BaseLight_eventGetLightOn_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BaseLight_eventGetLightOn_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BaseLight_eventGetLightOn_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("DEBUT GET/SET  //Get isLightOn"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_OnOverlapBegin()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnOverlapBegin"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420C00, 65535, sizeof(BaseLight_eventOnOverlapBegin_Parms));
			UProperty* NewProp_SweepResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SweepResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SweepResult, BaseLight_eventOnOverlapBegin_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFromSweep, BaseLight_eventOnOverlapBegin_Parms, bool);
			UProperty* NewProp_bFromSweep = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFromSweep"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFromSweep, BaseLight_eventOnOverlapBegin_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFromSweep, BaseLight_eventOnOverlapBegin_Parms), sizeof(bool), true);
			UProperty* NewProp_OtherBodyIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherBodyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(OtherBodyIndex, BaseLight_eventOnOverlapBegin_Parms), 0x0000000000000080);
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, BaseLight_eventOnOverlapBegin_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, BaseLight_eventOnOverlapBegin_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_OnOverlapEnd()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnOverlapEnd"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020C00, 65535, sizeof(BaseLight_eventOnOverlapEnd_Parms));
			UProperty* NewProp_OtherBodyIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherBodyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(OtherBodyIndex, BaseLight_eventOnOverlapEnd_Parms), 0x0000000000000080);
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, BaseLight_eventOnOverlapEnd_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, BaseLight_eventOnOverlapEnd_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_PlaySoundOnNightmaresHit()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySoundOnNightmaresHit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Function"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("?v?nement qui joue un son quand un ou plusieurs ennemis sont touch?s par la lumi?re"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_PrintEnemiesInArray()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrintEnemiesInArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Fonction de debuggage montrant si on a des ennemis dans ArrayOfEnemies lorsqu'on serait suppose en avoir"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_RemoveEnemyOfArrays()
	{
		struct BaseLight_eventRemoveEnemyOfArrays_Parms
		{
			AActor* actor;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveEnemyOfArrays"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventRemoveEnemyOfArrays_Parms));
			UProperty* NewProp_actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(actor, BaseLight_eventRemoveEnemyOfArrays_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Enleve l'ennemi aux tableaux"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_RemoveParentActorToIgnore()
	{
		struct BaseLight_eventRemoveParentActorToIgnore_Parms
		{
			AActor* actor;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveParentActorToIgnore"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventRemoveParentActorToIgnore_Parms));
			UProperty* NewProp_actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(actor, BaseLight_eventRemoveParentActorToIgnore_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_SetDamageTime()
	{
		struct BaseLight_eventSetDamageTime_Parms
		{
			float time;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDamageTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventSetDamageTime_Parms));
			UProperty* NewProp_time = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("time"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(time, BaseLight_eventSetDamageTime_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("fr?quence des d?g?ts sur les ennemis en secondes"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_SetDamageValue()
	{
		struct BaseLight_eventSetDamageValue_Parms
		{
			float damage;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDamageValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventSetDamageValue_Parms));
			UProperty* NewProp_damage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("damage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(damage, BaseLight_eventSetDamageValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("D?g?t de lumi?re par cycle de la boucle check all enemies"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_SetLightIntensity()
	{
		struct BaseLight_eventSetLightIntensity_Parms
		{
			float intensity;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLightIntensity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventSetLightIntensity_Parms));
			UProperty* NewProp_intensity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("intensity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(intensity, BaseLight_eventSetLightIntensity_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set intensit? de la lumi?re"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_SetLightOff()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLightOff"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("On allume la lumi?re"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_SetLightOn()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLightOn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("On ?teint la lumi?re"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_StopSoundOnNightmaresExit()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StopSoundOnNightmaresExit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Function"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_ToggleEquipToActor()
	{
		struct BaseLight_eventToggleEquipToActor_Parms
		{
			AActor* actor;
		};
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleEquipToActor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BaseLight_eventToggleEquipToActor_Parms));
			UProperty* NewProp_actor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("actor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(actor, BaseLight_eventToggleEquipToActor_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ABaseLight_ToggleLight()
	{
		UObject* Outer=Z_Construct_UClass_ABaseLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleLight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggle la lumi?re entre allum? ou ?teint"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ABaseLight_NoRegister()
	{
		return ABaseLight::StaticClass();
	}
	UClass* Z_Construct_UClass_ABaseLight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_DreamDefender();
			OuterClass = ABaseLight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_AddEnemyToArrays());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_AddParentActorToIgnore());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_CheckEnemyLineOfSight());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_EnemiesInLightUpdate());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_GetDamageTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_GetDamageValue());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_GetLightIntensity());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_GetLightOn());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_OnOverlapBegin());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_OnOverlapEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_PlaySoundOnNightmaresHit());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_PrintEnemiesInArray());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_RemoveEnemyOfArrays());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_RemoveParentActorToIgnore());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_SetDamageTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_SetDamageValue());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_SetLightIntensity());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_SetLightOff());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_SetLightOn());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_StopSoundOnNightmaresExit());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_ToggleEquipToActor());
				OuterClass->LinkChild(Z_Construct_UFunction_ABaseLight_ToggleLight());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_fDamageTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("fDamageTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(fDamageTime, ABaseLight), 0x0000000000000000);
				UProperty* NewProp_fDamageValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("fDamageValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(fDamageValue, ABaseLight), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsEquipped, ABaseLight, bool);
				UProperty* NewProp_bIsEquipped = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsEquipped"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsEquipped, ABaseLight), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsEquipped, ABaseLight), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsOn, ABaseLight, bool);
				UProperty* NewProp_bIsOn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsOn, ABaseLight), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsOn, ABaseLight), sizeof(bool), true);
				UProperty* NewProp_fLightIntensityOff = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("fLightIntensityOff"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(fLightIntensityOff, ABaseLight), 0x0000000000000000);
				UProperty* NewProp_fLightIntensityOn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("fLightIntensityOn"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(fLightIntensityOn, ABaseLight), 0x0000000000000000);
				UProperty* NewProp_HitDetectionMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HitDetectionMesh"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HitDetectionMesh, ABaseLight), 0x000000000008000d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_PointLight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PointLight"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PointLight, ABaseLight), 0x000000000008000d, Z_Construct_UClass_UPointLightComponent_NoRegister());
				UProperty* NewProp_SpotLight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpotLight"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpotLight, ABaseLight), 0x000000000008000d, Z_Construct_UClass_USpotLightComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_AddEnemyToArrays()); // 420932457
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_AddParentActorToIgnore()); // 1536449520
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_CheckEnemyLineOfSight()); // 649818416
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_EnemiesInLightUpdate()); // 2794559225
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_GetDamageTime()); // 483761536
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_GetDamageValue()); // 3995766335
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_GetLightIntensity()); // 2790272131
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_GetLightOn()); // 697921190
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_OnOverlapBegin()); // 3407112270
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_OnOverlapEnd()); // 2089003621
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_PlaySoundOnNightmaresHit()); // 2756503502
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_PrintEnemiesInArray()); // 2315425161
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_RemoveEnemyOfArrays()); // 2436421397
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_RemoveParentActorToIgnore()); // 3869627098
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_SetDamageTime()); // 866176874
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_SetDamageValue()); // 3790209849
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_SetLightIntensity()); // 2250938987
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_SetLightOff()); // 187657903
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_SetLightOn()); // 2190090811
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_StopSoundOnNightmaresExit()); // 983219007
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_ToggleEquipToActor()); // 1197333496
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ABaseLight_ToggleLight()); // 159902809
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_fDamageTime, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_fDamageTime, TEXT("ToolTip"), TEXT("Float qui repr?sente le temps en seconde de la fr?quence des d?g?ts"));
				MetaData->SetValue(NewProp_fDamageValue, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_fDamageValue, TEXT("ToolTip"), TEXT("Float qui repr?sente les degats effectuer par la lumiere"));
				MetaData->SetValue(NewProp_bIsEquipped, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_bIsEquipped, TEXT("ToolTip"), TEXT("Est-ce que la lumi?re est ?quip??"));
				MetaData->SetValue(NewProp_bIsOn, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_bIsOn, TEXT("ToolTip"), TEXT("La lumiere est-elle allume?"));
				MetaData->SetValue(NewProp_fLightIntensityOff, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_fLightIntensityOn, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_fLightIntensityOn, TEXT("ToolTip"), TEXT("Intensit? lumiere"));
				MetaData->SetValue(NewProp_HitDetectionMesh, TEXT("Category"), TEXT("Switch Components"));
				MetaData->SetValue(NewProp_HitDetectionMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_HitDetectionMesh, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_HitDetectionMesh, TEXT("ToolTip"), TEXT("Cone de hit detection"));
				MetaData->SetValue(NewProp_PointLight, TEXT("Category"), TEXT("Switch Components"));
				MetaData->SetValue(NewProp_PointLight, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_PointLight, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_PointLight, TEXT("ToolTip"), TEXT("Lumiere de type SpotLight"));
				MetaData->SetValue(NewProp_SpotLight, TEXT("Category"), TEXT("Switch Components"));
				MetaData->SetValue(NewProp_SpotLight, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SpotLight, TEXT("ModuleRelativePath"), TEXT("BaseLight.h"));
				MetaData->SetValue(NewProp_SpotLight, TEXT("ToolTip"), TEXT("Lumiere de type SpotLight"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ABaseLight(Z_Construct_UClass_ABaseLight, TEXT("ABaseLight"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ABaseLight);
	UFunction* Z_Construct_UFunction_ADreamDefenderCharacter_Pickup()
	{
		UObject* Outer=Z_Construct_UClass_ADreamDefenderCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pickup"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CharacterActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DreamDefenderCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("FORCEINLINE class UCameraComponent* GetFollowCamera() const { return FollowCamera; }"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ADreamDefenderCharacter_ToggleOnOff()
	{
		UObject* Outer=Z_Construct_UClass_ADreamDefenderCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleOnOff"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("CharacterActions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DreamDefenderCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ADreamDefenderCharacter_NoRegister()
	{
		return ADreamDefenderCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_ADreamDefenderCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage_DreamDefender();
			OuterClass = ADreamDefenderCharacter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;

				OuterClass->LinkChild(Z_Construct_UFunction_ADreamDefenderCharacter_Pickup());
				OuterClass->LinkChild(Z_Construct_UFunction_ADreamDefenderCharacter_ToggleOnOff());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(HasObjectPickedUp, ADreamDefenderCharacter, bool);
				UProperty* NewProp_HasObjectPickedUp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HasObjectPickedUp"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(HasObjectPickedUp, ADreamDefenderCharacter), 0x0000000000020005, CPP_BOOL_PROPERTY_BITMASK(HasObjectPickedUp, ADreamDefenderCharacter), sizeof(bool), true);
				UProperty* NewProp_BaseLookUpRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseLookUpRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseLookUpRate, ADreamDefenderCharacter), 0x0000000000020015);
				UProperty* NewProp_BaseTurnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseTurnRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseTurnRate, ADreamDefenderCharacter), 0x0000000000020015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ADreamDefenderCharacter_Pickup()); // 4075969333
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ADreamDefenderCharacter_ToggleOnOff()); // 4125942032
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DreamDefenderCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("DreamDefenderCharacter.h"));
				MetaData->SetValue(NewProp_HasObjectPickedUp, TEXT("Category"), TEXT("DreamDefenderCharacter"));
				MetaData->SetValue(NewProp_HasObjectPickedUp, TEXT("ModuleRelativePath"), TEXT("DreamDefenderCharacter.h"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("ModuleRelativePath"), TEXT("DreamDefenderCharacter.h"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("ToolTip"), TEXT("Base look up/down rate, in deg/sec. Other scaling may affect final rate."));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("ModuleRelativePath"), TEXT("DreamDefenderCharacter.h"));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("ToolTip"), TEXT("Base turn rate, in deg/sec. Other scaling may affect final turn rate."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADreamDefenderCharacter(Z_Construct_UClass_ADreamDefenderCharacter, TEXT("ADreamDefenderCharacter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADreamDefenderCharacter);
	UClass* Z_Construct_UClass_ADreamDefenderGameMode_NoRegister()
	{
		return ADreamDefenderGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_ADreamDefenderGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage_DreamDefender();
			OuterClass = ADreamDefenderGameMode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2088028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DreamDefenderGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("DreamDefenderGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ADreamDefenderGameMode(Z_Construct_UClass_ADreamDefenderGameMode, TEXT("ADreamDefenderGameMode"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ADreamDefenderGameMode);
	UClass* Z_Construct_UClass_ALittle_Girl_NoRegister()
	{
		return ALittle_Girl::StaticClass();
	}
	UClass* Z_Construct_UClass_ALittle_Girl()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_DreamDefender();
			OuterClass = ALittle_Girl::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Little_Girl.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Little_Girl.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ALittle_Girl(Z_Construct_UClass_ALittle_Girl, TEXT("ALittle_Girl"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ALittle_Girl);
	UFunction* Z_Construct_UFunction_ANightmare_BaseClass_Die()
	{
		UObject* Outer=Z_Construct_UClass_ANightmare_BaseClass();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Die"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Function"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANightmare_BaseClass_GetCurrentHealth()
	{
		struct Nightmare_BaseClass_eventGetCurrentHealth_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ANightmare_BaseClass();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentHealth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Nightmare_BaseClass_eventGetCurrentHealth_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, Nightmare_BaseClass_eventGetCurrentHealth_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get la vie actuelle du cauchemard"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANightmare_BaseClass_ReceiveDamage()
	{
		struct Nightmare_BaseClass_eventReceiveDamage_Parms
		{
			float damageTaken;
			float lightDamageFrequency;
		};
		UObject* Outer=Z_Construct_UClass_ANightmare_BaseClass();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReceiveDamage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Nightmare_BaseClass_eventReceiveDamage_Parms));
			UProperty* NewProp_lightDamageFrequency = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("lightDamageFrequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(lightDamageFrequency, Nightmare_BaseClass_eventReceiveDamage_Parms), 0x0000000000000080);
			UProperty* NewProp_damageTaken = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("damageTaken"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(damageTaken, Nightmare_BaseClass_eventReceiveDamage_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANightmare_BaseClass_SetCurrentHealth()
	{
		struct Nightmare_BaseClass_eventSetCurrentHealth_Parms
		{
			float health;
		};
		UObject* Outer=Z_Construct_UClass_ANightmare_BaseClass();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCurrentHealth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Nightmare_BaseClass_eventSetCurrentHealth_Parms));
			UProperty* NewProp_health = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("health"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(health, Nightmare_BaseClass_eventSetCurrentHealth_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Functions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set la vie actuelle du cauchemard"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANightmare_BaseClass_UpdateTransparency()
	{
		UObject* Outer=Z_Construct_UClass_ANightmare_BaseClass();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UpdateTransparency"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(Nightmare_BaseClass_eventUpdateTransparency_Parms));
			UProperty* NewProp_lightDamageFrequency = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("lightDamageFrequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(lightDamageFrequency, Nightmare_BaseClass_eventUpdateTransparency_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switch Function"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ANightmare_BaseClass_NoRegister()
	{
		return ANightmare_BaseClass::StaticClass();
	}
	UClass* Z_Construct_UClass_ANightmare_BaseClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage_DreamDefender();
			OuterClass = ANightmare_BaseClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ANightmare_BaseClass_Die());
				OuterClass->LinkChild(Z_Construct_UFunction_ANightmare_BaseClass_GetCurrentHealth());
				OuterClass->LinkChild(Z_Construct_UFunction_ANightmare_BaseClass_ReceiveDamage());
				OuterClass->LinkChild(Z_Construct_UFunction_ANightmare_BaseClass_SetCurrentHealth());
				OuterClass->LinkChild(Z_Construct_UFunction_ANightmare_BaseClass_UpdateTransparency());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_fHealth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("fHealth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(fHealth, ANightmare_BaseClass), 0x0000000000000000);
				UProperty* NewProp_fBaseHealth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("fBaseHealth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(fBaseHealth, ANightmare_BaseClass), 0x0000000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ANightmare_BaseClass_Die()); // 4145070519
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ANightmare_BaseClass_GetCurrentHealth()); // 3887041334
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ANightmare_BaseClass_ReceiveDamage()); // 2738079628
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ANightmare_BaseClass_SetCurrentHealth()); // 3588292053
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_ANightmare_BaseClass_UpdateTransparency()); // 7564865
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Nightmare_BaseClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
				MetaData->SetValue(NewProp_fHealth, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
				MetaData->SetValue(NewProp_fHealth, TEXT("ToolTip"), TEXT("Vie du cauchemard"));
				MetaData->SetValue(NewProp_fBaseHealth, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_fBaseHealth, TEXT("ModuleRelativePath"), TEXT("Nightmare_BaseClass.h"));
				MetaData->SetValue(NewProp_fBaseHealth, TEXT("ToolTip"), TEXT("Variable pour initialiser la vie du cote blueprint"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ANightmare_BaseClass(Z_Construct_UClass_ANightmare_BaseClass, TEXT("ANightmare_BaseClass"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ANightmare_BaseClass);
	UPackage* Z_Construct_UPackage_DreamDefender()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/DreamDefender")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0xE3817985;
			Guid.B = 0xBA5C87EE;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
